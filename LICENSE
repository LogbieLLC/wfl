SPDX-License-Identifier: WFL-1.0
# WFL Open Source License 1.0

## License Goals and Influences

The **WFL Open Source License 1.0** is a custom license designed for the WFL project. It blends elements from permissive and copyleft licenses to achieve the following goals:

- **Developer Freedom (inspired by MIT License):** Developers can build programs *using* the WFL language without *automatically* subjecting their own code to WFL’s license. They retain full copyright and commercialization rights to their programs. In other words, using WFL as a tool does not restrict how you license or sell your *own* software (similar to how the MIT License allows reuse “without restriction” ([The MIT License – Open Source Initiative](https://opensource.org/license/mit#:~:text=the%20Software%20without%20restriction%2C%20including,subject%20to%20the%20following%20conditions))).

- **Open Core Improvements (inspired by GPLv3/AGPLv3):** Any **extensions to the WFL language core** (e.g. modifications, plugins, or modules that add fundamental language features) must be released under open-source terms. Such extensions cannot be kept proprietary, ensuring the *core language and its enhancements remain open* to the community. This follows the spirit of GNU GPLv3’s requirement that modified versions of a program remain under the same license ([GNU General Public License - Wikipedia](https://en.wikipedia.org/wiki/GNU_General_Public_License#:~:text=,This%20License%20gives%20no)). We also draw from the AGPLv3 for cases where the software is used over a network, so even **hosted** modifications of WFL must share their source with users ([GNU Affero General Public License - Wikipedia](https://en.wikipedia.org/wiki/GNU_Affero_General_Public_License#:~:text=It%20is%20intended%20for%20software,6)).

- **Flexibility for Tools (inspired by LGPL and Classpath Exception):** Developers may create libraries, tools, or applications *with* WFL and choose to release them as open source or commercially – at their discretion. We explicitly allow linking or interfacing with the WFL core without imposing the WFL license on those external projects (akin to the Classpath linking exception used by Java ([licensing - What is a class path exception? - Open Source Stack Exchange](https://opensource.stackexchange.com/questions/515/what-is-a-class-path-exception#:~:text=General%20Public%20License%20cover%20the,If%20you%20modify%20this%20library))). This means *your independent software that simply uses WFL* is **not** a “derivative work” of WFL for licensing purposes ([www.apache.org](https://www.apache.org/licenses/LICENSE-2.0.txt#:~:text=License%2C%20Derivative%20Works%20shall%20not,additions%20to%20that%20Work%20or)). Many compiler and language projects use similar exceptions so as *not to restrict* the licenses of programs developed with them ([licensing - What is a class path exception? - Open Source Stack Exchange](https://opensource.stackexchange.com/questions/515/what-is-a-class-path-exception#:~:text=The%20classpath%20exception%20is%20just,apply%20to%20projects%20using%20them)).

- **Patent Protection (inspired by Apache License 2.0):** The license includes an Apache-style patent grant and **termination clause**. Contributors grant users patent rights on their contributions, and if anyone initiates a patent lawsuit related to WFL, they lose the patent rights granted by the license ([www.apache.org](https://www.apache.org/licenses/LICENSE-2.0.txt#:~:text=to%20which%20such%20Contribution,terminate%20as%20of%20the%20date)). This shields the community from patent aggression.

- **Contributor Non-Aggression:** To foster a collaborative environment, the license requires that contributors *do not initiate or threaten* patent or copyright litigation against each other. This extends the Apache 2.0 patent defense principle to copyright as well, discouraging any contributor from suing others in the community over their authorized use of WFL. In essence, if you contribute to WFL, you agree not to attack others for doing so (doing so would forfeit your rights under the license).

- **“Open Source Spirit” Clause:** The license carries a **non-binding** pledge encouraging developers to uphold the *spirit of open source*. This includes respecting community norms, upstreaming bug fixes and improvements, and cooperating in development. While not legally enforced, this clause serves as a reminder that WFL is a community-driven project that thrives on shared effort. (For example, the U.S. Dept. of Defense open source policy notes that improvements to OSS should be contributed back upstream whenever possible ([オープンソース界隈における2022年の政府系＆法的トピックをふり返る (A Look Back at Governmental & Legal Topics in the Open Source Community in 2022) #AdventCalendar2022 - Qiita](https://qiita.com/n-shima/items/d3bded2ec14e756ee262#:~:text=C,processes%20used%20by%20that%20project)), to everyone’s benefit.)

- **Clear Intent and Philosophy:** The license document begins with a plain-language **Preamble** outlining the developers’ intent and philosophy. This explanatory section, much like the Preamble in GNU GPLv3 ([The GNU General Public License v3.0
- GNU Project - Free Software Foundation](https://www.gnu.org/licenses/gpl-3.0.en.html#:~:text=Public%20License%20is%20intended%20to,released%20this%20way%20by%20its)), helps others understand *why* the terms exist. It emphasizes collaboration, innovation, and the balance between freedom for WFL users and openness for WFL itself. Annotations are also provided alongside legal terms to clarify their meaning.

Below is the **proposed text** of the WFL Open Source License 1.0, with section-by-section explanations:

## WFL Open Source License 1.0 – Text and Annotations

### Preamble (Intent and Philosophy)  
*This Preamble is a non-binding summary of intent.*  

**WFL Open Source License** is crafted to **empower developers** to use the WFL programming language freely in their own projects, while **ensuring that WFL’s core remains open and community-driven**. We believe developers should have full control over their own programs created with WFL, including the right to commercialize them, without onerous requirements. At the same time, improvements to the **language itself** should be shared openly so that the community can benefit collectively and no one can lock up the core features of WFL. 

In the spirit of open source, we ask everyone using or contributing to WFL to **collaborate in good faith**: share improvements upstream, respect the community of contributors, and help WFL evolve for everyone’s benefit. This license reflects a balance between permissive use for WFL-based applications and protective terms for WFL’s evolution. It includes provisions for patent peace and discourages litigation among collaborators, to keep the focus on innovation over conflict. The following sections lay out the legally binding terms of the license.

> *Plain-language note:* In short, the preamble says **use WFL as you want for your own apps (even commercial)**, but **keep WFL itself open and share improvements**. It also highlights the importance of working together and not using patents or lawsuits against each other, which is the ethos of this license.

### 1. Definitions  
**1.1. “Work” (or “WFL”):** The collective software distributed under this License, namely the WFL programming language’s source code, compiler/interpreter, and core libraries (the “WFL core”). This is the original work licensed to you.  

**1.2. “Contributor”:** Any individual or legal entity that develops or submits a Contribution to the Work. A “Contribution” is any work of authorship that is submitted to be included in the Work by the copyright owner (such as modifications, enhancements, or extensions to WFL). 

**1.3. “Derivative Work”:** Any work that is based on or derived from the Work, such as modifications to WFL’s source code or new modules that extend the WFL core functionality. For the purposes of this License, *Derivative Works do not include* works that **merely interface or communicate with WFL** without altering it. In other words, an independent program or module that simply uses WFL’s published APIs or language features, without modifying WFL itself, is **not** considered a Derivative Work of WFL. (This means that software *written in WFL or that calls WFL as a library* is usually not a Derivative Work of WFL, as long as it remains separable from the WFL core.) 

**1.4. “Extension Module”:** A plug-in, module, or similar component that is intended to **extend or change** the core language functionality of WFL (for example, adding new language syntax, new built-in functions, or altering WFL’s runtime behavior). Extension Modules are considered Derivative Works **if** they are based on WFL’s core code or designed to integrate tightly with the internals of WFL.

> *Explanation:* These definitions draw a line between *extending* WFL versus *using* WFL. If you **modify WFL itself or create a closely integrated extension** (essentially a derivative of WFL), it falls under this license’s share-alike rules. But if you just **write a program in WFL or use WFL as a tool**, that program is *not* a “Derivative Work” of WFL. This follows the precedent of Apache 2.0, which says that merely linking to a library doesn’t make your code a derivative of it ([www.apache.org](https://www.apache.org/licenses/LICENSE-2.0.txt#:~:text=License%2C%20Derivative%20Works%20shall%20not,additions%20to%20that%20Work%20or)). We explicitly define Extension Modules to capture things that plug into WFL’s core (so they must be open source), as opposed to normal software built *with* WFL (which can remain closed source if you want).

### 2. Grant of Copyright License  
**2.1.** **License Grants to Use and Distribute:** Each Contributor, as copyright holder, grants you a perpetual, worldwide, royalty-free, non-exclusive license to use, reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work, in both source and object (compiled) forms, **either unmodified or as part of a larger work**, subject to the conditions in Section 3 below. This means you have broad permission to copy and use WFL, and to combine it with your own code or other libraries. 

**2.2.** **Retention of Rights for Independent Works:** For clarity, any software, application, or module **developed using WFL but which is not a Derivative Work of WFL** (as defined in 1.3) is *not* governed by this License. The act of using or interfacing with WFL does not, by itself, subject your separate work to the terms of this License. You retain full copyright and control over your own original software. (Example: If you write a program in the WFL language, *you* own that program and can license or sell it under any terms of your choosing.)

**2.3.** **No Trademark License:** This License does not grant you any rights to use the names, logos, or trademarks of the WFL project or its contributors.

> *Explanation:* Section 2 is giving you permission to **use WFL freely**. You can copy it, run it, modify it, distribute it, even sell it—as long as you follow Section 3’s rules when you distribute *modified versions of WFL*. Crucially, 2.2 makes clear that *your own code is yours*. Just because you wrote it in WFL or call into WFL, doesn’t mean the WFL license applies to your code. This lets developers **build commercial or closed-source software with WFL** without fear – much like MIT or Apache licenses allow unlimited use ([The MIT License – Open Source Initiative](https://opensource.org/license/mit#:~:text=the%20Software%20without%20restriction%2C%20including,subject%20to%20the%20following%20conditions)). The language here is inspired by the Classpath Exception and Apache 2.0, which ensure an open-source library or language doesn’t “infect” your proprietary code ([licensing - What is a class path exception? - Open Source Stack Exchange](https://opensource.stackexchange.com/questions/515/what-is-a-class-path-exception#:~:text=General%20Public%20License%20cover%20the,If%20you%20modify%20this%20library)) ([www.apache.org](https://www.apache.org/licenses/LICENSE-2.0.txt#:~:text=License%2C%20Derivative%20Works%20shall%20not,additions%20to%20that%20Work%20or)). Section 2.3 is a standard note that we’re *not* giving away trademark rights (so you can’t mislead others by using the project’s name/branding in your own product names, etc.).

### 3. Conditions on Derivative Works (Copyleft Requirements)  
**3.1. Open Source Release of Extensions:** If you **create and distribute** a Derivative Work of WFL – for example, modify WFL’s source code, or develop an Extension Module that extends the WFL core – you **must** make the source code of your Derivative Work available under an open-source license **no more permissive** than this one (i.e., at least as protective of WFL’s core). In particular, any such modifications or extensions to WFL’s core functionality *must* be released under **this WFL Open Source License 1.0** or a **compatible OSI-approved license** that allows further modification and sharing under similar terms. You may not distribute a WFL core modification or Extension Module solely under a proprietary or closed-source license.
**3.2. Upstream Contribution Encouraged:** While not an absolute requirement, you are **encouraged** to contribute your modifications back to the official WFL project (e.g., by submitting patches or merge requests) so that they can be reviewed and incorporated upstream. This helps avoid fragmentation of the language and ensures the community benefits from improvements. (See Section 6, “Spirit of Open Source,” for a non-binding expression of this principle.)

**3.3. Network Use and SaaS:** If you deploy a modified version of WFL (or an Extension Module to WFL) *purely as a service* accessible to others over a network, the requirement to release source still applies as if you had distributed the software. In other words, **making a modified WFL available for others to use over a network** counts as a form of distribution under this License. Those users should be given access to the corresponding source code of the modifications. *(This clause is analogous to the AGPLv3’s approach to network software ([GNU Affero General Public License - Wikipedia](https://en.wikipedia.org/wiki/GNU_Affero_General_Public_License#:~:text=It%20is%20intended%20for%20software,6)), ensuring that software-as-a-service isn’t used to evade the open-source requirement for WFL core changes.)*

**3.4. Combined Works:** You may combine the Work with other code to create a larger application or system. If the WFL components remain unmodified and separable, this License does not impose conditions on the other parts of your application. However, if you **directly modify** WFL core files or include portions of WFL code in other files, those modifications (and only those, not necessarily your entire application) must be released under the terms of this License as described above.

**3.5. Notice Requirement:** When you distribute a Derivative Work of WFL, you must include a notice (e.g. in documentation or source files) stating that you have modified WFL, and you should retain any attribution or copyright notices from the original WFL source in your modified files. This is to give proper credit and inform recipients that they are not receiving the original unaltered WFL.

> *Explanation:* Section 3 is the heart of the **copyleft** aspect. It says if you improve or extend WFL itself and share that with others, you have to **share your source code** for those improvements. You can’t take the WFL language, add a new secret feature, and sell it as a closed product without giving back. Any **WFL core changes or extensions must stay open source**. This keeps WFL’s evolution in the open and prevents proprietary forks of the language. Clause 3.1 basically mirrors the GPLv3 rule that modifications must be released under the same license ([GNU General Public License - Wikipedia](https://en.wikipedia.org/wiki/GNU_General_Public_License#:~:text=,This%20License%20gives%20no)), but tailored to WFL. Clause 3.3 explicitly covers software-as-a-service use: even if you don’t “distribute” binaries, if you let users access a modified WFL over the internet, you should publish the source (inspired by AGPLv3’s provisions ([GNU Affero General Public License - Wikipedia](https://en.wikipedia.org/wiki/GNU_Affero_General_Public_License#:~:text=It%20is%20intended%20for%20software,6)) to close the ASP loophole). Clause 3.4 clarifies that combining WFL with other code doesn’t force *all* your code to be open; only the parts that are actually derived from WFL need to be open. This is similar to how the LGPL or MPL work – your own separate modules can be any license, but changes to the library (WFL core) itself stay under this license ([licensing - What is a class path exception? - Open Source Stack Exchange](https://opensource.stackexchange.com/questions/515/what-is-a-class-path-exception#:~:text=The%20classpath%20exception%20is%20just,apply%20to%20projects%20using%20them)). Finally, 3.5 is an attribution/notice requirement, like in Apache 2.0, just to ensure transparency about changes.

### 4. Patent License and Non-Aggression Pact  
**4.1. Patent Grant:** Each Contributor hereby grants to you a perpetual, worldwide, royalty-free, non-exclusive license under their patent rights to make, use, sell, offer for sale, import, and otherwise transfer the Work and any Derivative Works of the Work. This patent license applies only to patent claims that are necessarily infringed by the Contributor’s Contribution(s) alone or by combination of their Contribution with the original Work. *(In plain terms, contributors promise not to sue users of WFL for patent infringement based on their contributions to WFL.)*

**4.2. Patent/Copyright Non-Assertion:** **Termination for Litigation:** If you file a lawsuit or similar proceeding **against any other contributor or user of WFL** alleging that the Work (or any Contribution to the Work) infringes your patent or copyright, then **any rights granted to you under this License will terminate** immediately. In other words, you lose the protections and permissions of this License if you initiate or threaten patent or copyright litigation over the WFL software or contributions. This clause is **defensive** – it exists to prevent patent or copyright aggression within the community. *(This is analogous to the patent retaliation clause in Apache 2.0 ([www.apache.org](https://www.apache.org/licenses/LICENSE-2.0.txt#:~:text=to%20which%20such%20Contribution,terminate%20as%20of%20the%20date)), expanded here to include copyright claims as well. It ensures that anyone trying to sue others over WFL’s code forfeits their own rights under the license.)*

**4.3. Exception:** The only exception to 4.2 is if you are responding to a patent or copyright lawsuit *against you* (for example, via a counterclaim or defense). Merely defending yourself in court against an IP claim involving WFL does not terminate your license. The termination is triggered by initiating aggression, not by defending. (Also, Section 4.2 does not prevent a contributor from enforcing this License itself – e.g., pursuing action against someone who violates the open-source requirements – since that is action to uphold the license, not to undermine it.)

> *Explanation:* Section 4 deals with **patents and legal attacks**. First, 4.1 ensures that when contributors contribute to WFL, they also give users a license to any patents that *would read on their contribution*. This is important in modern open source – it prevents a contributor from contributing code and later claiming you can’t use that code without paying for a patent. Apache 2.0 has a similar patent grant ([www.apache.org](https://www.apache.org/licenses/LICENSE-2.0.txt#:~:text=license%20to%20make%2C%20have%20made%2C,terminate%20as%20of%20the%20date)). Next, 4.2 is a strong **non-aggression clause**: if you go on the offensive and sue someone claiming that WFL (or a contribution in it) infringes your patent or copyright, then you lose your rights under *this* license. Essentially, *don’t bite the hand that feeds you*. This deters patent trolls and hostile actors from attacking the project or its users. Apache 2.0 only mentions patent lawsuits ([www.apache.org](https://www.apache.org/licenses/LICENSE-2.0.txt#:~:text=to%20which%20such%20Contribution,terminate%20as%20of%20the%20date)); we’ve extended the idea to copyright lawsuits too, to foster peace on all IP fronts. The idea is to keep the WFL community safe from internal legal warfare. Clause 4.3 clarifies we’re not punishing someone for defending themselves or for enforcing the open-source license; it’s only meant to stop aggressors. Overall, this section is about creating a **patent-safe zone** around WFL and making sure contributors can work together without fear of being sued by each other.

### 5. Disclaimer of Warranty  
**THERE IS NO WARRANTY FOR THE WORK.** The Work (WFL software) is provided “**AS IS**”, without warranty of any kind (to the extent permitted by law). This includes **no warranty** of merchantability, fitness for a particular purpose, or non-infringement. The entire risk of using, modifying, or distributing the Work lies with you. Should the Work prove defective or cause any issues, you assume the cost of all necessary servicing, repair, or correction.

**(In simpler terms: The WFL project and contributors are **not making promises** that WFL works perfectly or will meet your needs. You’re using it at your own risk.)**

### 6. Limitation of Liability  
Under no circumstances and under no legal theory (whether in contract, tort, or otherwise) shall any contributor or copyright holder be liable to you for any **damages**, including direct, indirect, special, incidental, or consequential damages arising out of the use or distribution of the Work. This means no contributor is liable for things like loss of profits, loss of data, or business interruption related to your use of WFL, even if that contributor has been advised of the possibility of such damages.

**(Simply put: If something goes wrong using WFL, you can’t hold the contributors liable. They’re not responsible for your losses or injuries.)**

### 7. “Spirit of Open Source” – Community Cooperation *(Informative Section)*  
*The following section is **not** a strict legal requirement but a statement of values.* 

The WFL project asks all contributors and users to uphold the **spirit of open source** in their interactions and use of WFL. This means: 

- **Collaborative Development:** Whenever possible, contribute your fixes and improvements back to the WFL project. By upstreaming changes, you help avoid divergent versions and ensure everyone benefits from enhancements ([オープンソース界隈における2022年の政府系＆法的トピックをふり返る (A Look Back at Governmental & Legal Topics in the Open Source Community in 2022) #AdventCalendar2022 - Qiita](https://qiita.com/n-shima/items/d3bded2ec14e756ee262#:~:text=C,processes%20used%20by%20that%20project)). Even though Section 3 legally requires sharing core modifications, we encourage you to actively engage with the community during development, not just after the fact.

- **Respect and Attribution:** Respect the community of WFL developers. Give credit where it’s due, and don’t misrepresent others’ work as your own. Treat community members with respect in discussions and decision-making.

- **Open Discussion and Transparency:** Engage in open discussion about features and bugs. We value open decision-making processes. Before creating proprietary forks or separate versions, consider discussing your needs with the community – perhaps WFL can be improved upstream to meet them.

- **Education and Support:** If you extend or use WFL in innovative ways, share your knowledge (when you can) through documentation or forums. This helps grow an ecosystem of tools and best practices around WFL, to everyone’s advantage.

By adhering to these principles, you contribute to a **healthy, vibrant open source community** around WFL. This clause isn’t enforceable in court, but we believe that following it will make WFL more successful and rewarding for everyone involved.

> *Note:* The “spirit of open source” clause is our community ethos. It echoes common open-source best practices – for example, avoiding long-lived forks by contributing back improvements ([オープンソース界隈における2022年の政府系＆法的トピックをふり返る (A Look Back at Governmental & Legal Topics in the Open Source Community in 2022) #AdventCalendar2022 - Qiita](https://qiita.com/n-shima/items/d3bded2ec14e756ee262#:~:text=C,processes%20used%20by%20that%20project)), and fostering a collaborative environment. While you won’t breach the license by ignoring this section, we hope you’ll embrace it. Open source works best when there’s goodwill and cooperation beyond just what the legal terms require. This section is somewhat analogous to the GNU GPL’s preamble statements about how free software is a community endeavor built on mutual respect ([The GNU General Public License v3.0
- GNU Project - Free Software Foundation](https://www.gnu.org/licenses/gpl-3.0.en.html#:~:text=Public%20License%20is%20intended%20to,released%20this%20way%20by%20its)). It’s here to remind us that a license alone doesn’t create a community – *people* do, by acting in the spirit of openness.

### 8. General Provisions  
**8.1. Application of License:** The terms of this License apply to the Work as a whole and each Contribution, as defined. Future versions of this License may be published by the WFL project maintainers. You may choose to continue using the Work under this version or any later version of the License released by the project. (This allows for updates to the license in the future, for example to address new legal issues, but using a later version is optional unless the project owners declare the update is mandatory for new contributions.)

**8.2. Severability:** If any provision of this License is held to be unenforceable under applicable law, that provision shall be reformed (interpreted or modified) to the minimum extent necessary to make it enforceable, and the remainder of the License will remain in full effect.

**8.3. No Waiver:** Failure or delay by any Contributor to enforce any provision of this License does not waive their right to enforce it in the future.

**8.4. Governing Law:** This License does not specify a governing law or jurisdiction. For any dispute that might arise regarding this License that cannot be resolved informally, the applicable law will be determined by the relevant jurisdiction’s conflict-of-law rules, or as specified by an agreement between the parties in dispute.

---

**End of License Terms.**

> *Explanation:* Section 8 wraps up with some standard legal boilerplate. Severability means if one clause is invalid, the rest still stand. No waiver means just because we don’t enforce a breach immediately doesn’t mean the license can be ignored later. We’ve also allowed for the possibility of new versions of this license (like how GPL allows “or later” versions). The license doesn’t pin down a specific law or venue for disputes (some licenses do, but we left it generic here). Ideally, everyone will just follow the rules and we won’t need to worry about legal disputes at all!

## Comparison with Existing Licenses (Summary)

To put this WFL license in context, here’s how it parallels and differs from well-known open-source licenses:

- **MIT License:** MIT is a highly permissive license that lets you do almost anything with the code as long as you include the original license notice. It imposes no requirements to share modifications and allows proprietary use ([The MIT License – Open Source Initiative](https://opensource.org/license/mit#:~:text=the%20Software%20without%20restriction%2C%20including,subject%20to%20the%20following%20conditions)). Our WFL license is *permissive* when it comes to using WFL in your own apps (just like MIT, you can use WFL without your code being affected). However, unlike MIT, the WFL license *does* require sharing modifications to the *WFL core*. In that sense, it’s a mix of permissive for usage and protective for contributions.

- **Apache License 2.0:** Apache 2.0 is also permissive and notably includes a patent grant and a retaliation clause for patent lawsuits ([www.apache.org](https://www.apache.org/licenses/LICENSE-2.0.txt#:~:text=to%20which%20such%20Contribution,terminate%20as%20of%20the%20date)). We borrowed that concept: WFL license explicitly grants patent rights from contributors and terminates them if someone sues over patents. Apache 2.0 does not require you to open source your changes, it only asks that you note them and include the Apache license in redistributions. WFL license diverges by **requiring open-sourcing of core extensions** (a stronger copyleft stance than Apache). But in spirit, both licenses aim to encourage contribution (Apache implicitly, WFL explicitly) and both protect the community from patent litigation. We also took Apache’s idea that merely *linking* to a library doesn’t create a derivative work ([www.apache.org](https://www.apache.org/licenses/LICENSE-2.0.txt#:~:text=License%2C%20Derivative%20Works%20shall%20not,additions%20to%20that%20Work%20or)), reinforcing that external programs using WFL can remain under any license.

- **GNU GPL v3:** GPL v3 is a strong copyleft license: if you distribute a modified version of a GPL-licensed program, you *must* release it under GPL as well ([GNU General Public License - Wikipedia](https://en.wikipedia.org/wiki/GNU_General_Public_License#:~:text=,This%20License%20gives%20no)). Our WFL license mirrors this for WFL’s own code – any modified WFL core must be open source under the same terms. However, GPLv3 would normally also infect combined works (e.g., if you link a GPL library into your program, your program needs to be GPL). We relaxed that with an exception so that using WFL in an application does **not** force the application to be open source (this is more like LGPL or GPL with the Classpath Exception ([licensing - What is a class path exception? - Open Source Stack Exchange](https://opensource.stackexchange.com/questions/515/what-is-a-class-path-exception#:~:text=General%20Public%20License%20cover%20the,If%20you%20modify%20this%20library))). Additionally, GPLv3 introduced an implicit patent license from contributors, but it doesn’t have an explicit no-lawsuit clause; our license makes the patent grant explicit and adds the no-lawsuit (non-aggression) promise as a condition. GPLv3’s text is lengthy and has a well-known Preamble about freedom ([The GNU General Public License v3.0
- GNU Project - Free Software Foundation](https://www.gnu.org/licenses/gpl-3.0.en.html#:~:text=Public%20License%20is%20intended%20to,released%20this%20way%20by%20its)); we aimed to achieve a similar clarity of purpose in our Preamble, albeit in our own words about open collaboration.

- **GNU AGPL v3:** AGPL is basically GPLv3 with an extra requirement: if you use the software to provide a service over a network, you must offer the source code to the users of that service ([GNU Affero General Public License - Wikipedia](https://en.wikipedia.org/wiki/GNU_Affero_General_Public_License#:~:text=It%20is%20intended%20for%20software,6)). We resonated with that idea to prevent “hidden” improvements. The WFL license’s Section 3.3 is an AGPL-like clause ensuring that core extensions of WFL used in network services are still shared openly. This is relevant if, say, someone makes a custom WFL interpreter and offers an online WFL coding service – under our license, they’d need to make their modified interpreter source available, as AGPL would require.

- **Classpath Exception (for GNU GPL):** The Classpath Exception is not a full license but a clause used with GPL to allow proprietary software to link against an open-source library without forcing the proprietary code to become GPL ([licensing - What is a class path exception? - Open Source Stack Exchange](https://opensource.stackexchange.com/questions/515/what-is-a-class-path-exception#:~:text=General%20Public%20License%20cover%20the,If%20you%20modify%20this%20library)). We effectively built a similar exception into the WFL license definitions. By stating that independent modules or programs that just use WFL aren’t considered Derivative Works, we ensure that **WFL can be used in closed-source projects** freely. This is a crucial nuance that combines GPL’s sharing mandate for improvements with MIT/Apache’s freedom for users’ own programs. It’s exactly in line with the practice of languages like Java: OpenJDK is GPL+Classpath Exception so that Java apps can be proprietary ([licensing - What is a class path exception? - Open Source Stack Exchange](https://opensource.stackexchange.com/questions/515/what-is-a-class-path-exception#:~:text=The%20classpath%20exception%20is%20just,apply%20to%20projects%20using%20them)). WFL license achieves this duality in one document.

In summary, the WFL Open Source License 1.0 is **unique** in that it’s *neither purely copyleft nor purely permissive*: it’s copyleft for the language itself and permissive for works *produced with* the language. It takes the **patent safety** and clarity of Apache 2.0 ([www.apache.org](https://www.apache.org/licenses/LICENSE-2.0.txt#:~:text=to%20which%20such%20Contribution,terminate%20as%20of%20the%20date)), the **share-alike** ethos of GPLv3 ([GNU General Public License - Wikipedia](https://en.wikipedia.org/wiki/GNU_General_Public_License#:~:text=,This%20License%20gives%20no)) (extended by AGPLv3’s network clause ([GNU Affero General Public License - Wikipedia](https://en.wikipedia.org/wiki/GNU_Affero_General_Public_License#:~:text=It%20is%20intended%20for%20software,6))), and the **developer freedom** of MIT ([The MIT License – Open Source Initiative](https://opensource.org/license/mit#:~:text=the%20Software%20without%20restriction%2C%20including,subject%20to%20the%20following%20conditions)), stitching them together in a way that suits the goals of the WFL community. We also added an explicit **community values** section, which while not common in licenses (most licenses stick to legal terms), serves to guide and remind participants of the project’s collaborative philosophy.

**Sources:**

- Open Source Initiative – *The MIT License*: core permission clause ([The MIT License – Open Source Initiative](https://opensource.org/license/mit#:~:text=the%20Software%20without%20restriction%2C%20including,subject%20to%20the%20following%20conditions)).  
- StackExchange discussion on GPL linking exceptions: example of Classpath exception text ([licensing - What is a class path exception? - Open Source Stack Exchange](https://opensource.stackexchange.com/questions/515/what-is-a-class-path-exception#:~:text=General%20Public%20License%20cover%20the,If%20you%20modify%20this%20library)) and rationale ([licensing - What is a class path exception? - Open Source Stack Exchange](https://opensource.stackexchange.com/questions/515/what-is-a-class-path-exception#:~:text=The%20classpath%20exception%20is%20just,apply%20to%20projects%20using%20them)).  
- Apache License 2.0 – patent clause and definition of derivative works (linking) ([www.apache.org](https://www.apache.org/licenses/LICENSE-2.0.txt#:~:text=to%20which%20such%20Contribution,terminate%20as%20of%20the%20date)) ([www.apache.org](https://www.apache.org/licenses/LICENSE-2.0.txt#:~:text=License%2C%20Derivative%20Works%20shall%20not,additions%20to%20that%20Work%20or)).  
- GNU General Public License v3 – copyleft requirement for modified works ([GNU General Public License - Wikipedia](https://en.wikipedia.org/wiki/GNU_General_Public_License#:~:text=,This%20License%20gives%20no)) and Preamble highlighting intent ([The GNU General Public License v3.0
- GNU Project - Free Software Foundation](https://www.gnu.org/licenses/gpl-3.0.en.html#:~:text=Public%20License%20is%20intended%20to,released%20this%20way%20by%20its)).  
- GNU Affero GPL v3 – network service source-sharing provision ([GNU Affero General Public License - Wikipedia](https://en.wikipedia.org/wiki/GNU_Affero_General_Public_License#:~:text=It%20is%20intended%20for%20software,6)).  
- Department of Defense OSS Guidance – recommendation to upstream improvements ([オープンソース界隈における2022年の政府系＆法的トピックをふり返る (A Look Back at Governmental & Legal Topics in the Open Source Community in 2022) #AdventCalendar2022 - Qiita](https://qiita.com/n-shima/items/d3bded2ec14e756ee262#:~:text=C,processes%20used%20by%20that%20project)).
