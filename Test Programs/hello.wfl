// Create a sophisticated Hello World program demonstrating WFL features
create container called "AdvancedGreeting":
    private:
        store greetings as map
        store current language as text
        store display count as number
        
    public:
        when created:
            does:
                // Initialize our greetings map
                set greetings to:
                    "English" is "Hello"
                    "Spanish" is "Hola"
                    "French" is "Bonjour"
                    "Japanese" is "こんにちは"
                end set
                set current language to "English"
                set display count to 0
        end when

        define action called "say hello":
            needs:
                name as text with default "World"
                language as text with default "English"
            gives back:
                response as text
            does:
                // Validate inputs
                check name:
                    must not be empty
                    must be at most 100 characters
                end check

                // Get appropriate greeting
                store greeting text as perform "get greeting" with language
                
                // Track display count
                increase display count by 1
                
                // Construct final message
                store message as join greeting text and ", " and name and "!"
                
                // Add display count
                join message and " (displayed " and display count and " times)"
                
                give back message
        end action

        define private action called "get greeting":
            needs:
                language as text
            gives back:
                greeting as text
            does:
                check if language is in greetings:
                    give back greetings at language
                otherwise:
                    give back greetings at "English"
                end check
        end action

        define action called "add greeting":
            needs:
                language as text
                greeting as text
            gives back:
                success as truth value
            does:
                try:
                    check language and greeting:
                        must not be empty
                        must be at most 50 characters
                    end check
                    
                    store greeting in greetings at language
                    give back yes
                catch any error:
                    give back no
                end try
        end action
end container

// Create main program
define action called "run hello world":
    does:
        // Create our greeter
        create greeter as new "AdvancedGreeting"
        
        // Display basic greeting
        store result as perform greeter "say hello"
        display result
        
        // Try different languages
        for each language in ["Spanish", "French", "Japanese"]:
            store result as perform greeter "say hello" with:
                name as "World"
                language as language
            end with
            display result
        end for each
        
        // Add a new greeting
        perform greeter "add greeting" with:
            language as "German"
            greeting as "Hallo"
        end with
        
        // Try the new greeting
        store result as perform greeter "say hello" with:
            name as "Programmer"
            language as "German"
        end with
        display result
        
        // Error handling demonstration
        try:
            perform greeter "say hello" with:
                name as ""  // Empty name should trigger validation
            end with
        catch any error:
            display "Caught expected validation error!"
        end try
end action

// Run the program
perform "run hello world"